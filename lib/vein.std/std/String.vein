#space "std"

[special, forwarded]
public class String : Object
{
    [native("!!value")]
    __value: raw;
    //[native]
    //public extern this[index: i32]: Char;
    [native]
    public /*extern*/ Length: i32;

    public override toString(): String
        |> this;

    [special]
    public static op_Add(v1: string, v2: string): string
        |> self.i_call_String_Concat(v1, v2);
    [special]
    public static op_Add(v1: string, v2: i32): string
        |> self.i_call_String_Concat(v1, v2.toString());

    [special]
    public static op_NotEqual(v1: string, v2: string): bool
        |> !self.op_Equal(v1, v2);

    [special]
    public static op_Equal(v1: string, v2: string): bool
        |> self.i_call_String_Equal(v1, v2);

    public static equal(v1: string, v2: string): bool 
        |> v1 == v2;

    public static contains(v1: string, v2: string): bool 
        |> self.i_call_String_Contains(v1, v2);

    public static endsWith(v1: string, v2: string): bool 
        |> self.i_call_String_EndsWith(v1, v2);

    public static startsWith(v1: string, v2: string): bool 
        |> self.i_call_String_StartsWith(v1, v2);

    public static getSize(v1: string, encoding: i32): i32
        |> self.i_call_String_getSize(v1, encoding);

    public static copyTo(v1: string, buffer: Span<u8>, encoding: i32): void
        |> self.i_call_String_copyTo(v1, buffer, encoding);

    public static createFrom(buffer: Span<u8>, encoding: i32): String
        |> self.i_call_String_createFrom(buffer, encoding);

    public static createFrom(buffer: Span<u8>, size: i32, encoding: i32): String
        |> self.i_call_String_createFrom(buffer, size, encoding);

    [native("__internal__", "i_call_String_StartsWith")]
    private extern static i_call_String_StartsWith(v1: string, v2: string): bool;
    [native("__internal__", "i_call_String_EndsWith")]
    private extern static i_call_String_EndsWith(v1: string, v2: string): bool;
    [native("__internal__", "i_call_String_Contains")]
    private extern static i_call_String_Contains(v1: string, v2: string): bool;
    [native("__internal__", "i_call_String_Concat")]
    private extern static i_call_String_Concat(v1: string, v2: string): string;
    [native("__internal__", "i_call_String_Equal")]
    private extern static i_call_String_Equal(v1: string, v2: string): bool;

    [native("__internal__", "i_call_String_getSize")]
    private extern static i_call_String_getSize(v1: string, encoding: i32): i32;
    [native("__internal__", "i_call_String_copyTo")]
    private extern static i_call_String_copyTo(v1: string, buffer: Span<u8>, encoding: i32): void;
    [native("__internal__", "i_call_String_createFrom")]
    private extern static i_call_String_createFrom(buffer: Span<u8>, encoding: i32): string;
    [native("__internal__", "i_call_String_createFromWithSize")]
    private extern static i_call_String_createFrom(buffer: Span<u8>, size: i32, encoding: i32): string;

    [native("__internal__", "i_call_String_fmt")]
    public static extern format(t: string, o1: Object): string;
    [native("__internal__", "i_call_String_fmt")]
    public static extern format(t: string, o1: Object, o2: Object): string;
    [native("__internal__", "i_call_String_fmt")]
    public static extern format(t: string, o1: Object, o2: Object, o3: Object): string;
    [native("__internal__", "i_call_String_fmt")]
    public static extern format(t: string, o1: Object, o2: Object, o3: Object, o4: Object): string;
    [native("__internal__", "i_call_String_fmt")]
    public static extern format(t: string, o1: Object, o2: Object, o3: Object, o4: Object, o5: Object): string;
    [native("__internal__", "i_call_String_fmt")]
    public static extern format(t: string, o1: Object, o2: Object, o3: Object, o4: Object, o5: Object, o6: Object): string;
}


global alias string <| String;