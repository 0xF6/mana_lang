#space "std"


[fixture]
private static class NumericTest 
{
    [test]
    public static i32_mod(): void 
    {
        let two = 2;
        Assert.equal(2 % two, 0);
        Assert.equal(4 % two, 0);
        Assert.equal(6 % two, 0);
        Assert.equal(8 % two, 0);
        Assert.equal(12 % two, 0);
        Assert.equal(15 % two, 1);
    }

    [test]
    public static i32_add(): void 
    {
        let two = 2;
        Assert.equal(2 + two, 4);
        Assert.equal(4 + two, 6);
        Assert.equal(6 + two, 8);
        Assert.equal(8 + two, 10);
        Assert.equal(12 + two, 14);
        Assert.equal(15 + two, 17);
    }

    [test]
    public static i32_sub(): void 
    {
        let two = 2;
        Assert.equal(2 - two, 0);
        Assert.equal(4 - two, 2);
        Assert.equal(6 - two, 4);
        Assert.equal(8 - two, 6);
        Assert.equal(12 - two, 10);
        Assert.equal(15 - two, 13);
    }

    [test]
    public static i32_div(): void 
    {
        let two = 2;
        Assert.equal(2 / two, 1);
        Assert.equal(4 / two, 2);
        Assert.equal(6 / two, 3);
        Assert.equal(8 / two, 4);
        Assert.equal(12 / two, 6);
        Assert.equal(15 / two, 7);
    }

    [test]
    public static i32_mul(): void 
    {
        let two = 2;
        Assert.equal(2 * two, 4);
        Assert.equal(4 * two, 8);
        Assert.equal(6 * two, 12);
        Assert.equal(8 * two, 16);
        Assert.equal(12 * two, 24);
        Assert.equal(15 * two, 30);
    }
    [test]
    public static fib_test(): void {
        Fib(15);
        return;
    }

    public static Fib(n: i32): i32
    {
        if (n < 2)
        {
            return n;
        }
        else
        {
            let n1 = Fib(n - 1);
            let n2 = Fib(n - 2);
            let n3 = n1 + n2;
            return n3;
        }
    }
    /*public static Fib(x: i32): i32 {
        if (x == 0) {
            return 0;
        }

        let prev = 0;
        let next = 1;
        for (let i = 1; i < x; i++)
        {
            let sum = prev + next;
            prev = next;
            next = sum;
        }
        return next;
    }*/

    [test]
    public static i16_mod(): void 
    {
        let two = as<i16>(2);
        Assert.equal(as<i16>(2) % two, as<i16>(0));
        Assert.equal(as<i16>(4) % two, as<i16>(0));
        Assert.equal(as<i16>(6) % two, as<i16>(0));
        Assert.equal(as<i16>(8) % two, as<i16>(0));
        Assert.equal(as<i16>(12) % two, as<i16>(0));
        Assert.equal(as<i16>(15) % two, as<i16>(1));

        if (as<i16>(0) == as<i16>(12) % as<i16>(2)) {
            Out.print("suka 12 % 2 == 0");
        } else {
            Out.print("blyat 12 % 2 != 0");
        }
    }

    [test]
    public static i16_mul(): void 
    {
        let two = as<i16>(2);
        Assert.equal(as<i16>(2) * two, as<i16>(4));
        Assert.equal(as<i16>(4) * two, as<i16>(8));
        Assert.equal(as<i16>(6) * two, as<i16>(12));
        Assert.equal(as<i16>(8) * two, as<i16>(16));
        Assert.equal(as<i16>(12) * two, as<i16>(24));
        Assert.equal(as<i16>(15) * two, as<i16>(30));
    }
}