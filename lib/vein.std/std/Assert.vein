#space "std"


public static class Assert
{
    public static equal(s1: string, s2: string): void {
        if (s1 == s2) {
            Out.print(string.format("\u001b[32mSuccess assert\u001b[0m: '{0}'", self.get_top_frame_name()));
            return;
        }
        Out.print(string.format("\u001b[31mFailed assert\u001b[0m: '{0}'", self.get_top_frame_name()));
    }
    public static isTrue(s1: bool): void {
        if (s1) {
            Out.print(string.format("\u001b[32mSuccess assert\u001b[0m: '{0}'", self.get_top_frame_name()));
            return;
        }
        Out.print(string.format("\u001b[31mFailed assert\u001b[0m: '{0}'", self.get_top_frame_name()));
    }
    public static isFalse(s1: bool): void {
        if (!s1) {
            Out.print(string.format("\u001b[32mSuccess assert\u001b[0m: '{0}'", self.get_top_frame_name()));
            return;
        }
        Out.print(string.format("\u001b[31mFailed assert\u001b[0m: '{0}'", self.get_top_frame_name()));
    }


    [native("__internal__", "get_top_frame_name")]
    private static extern get_top_frame_name(): string;
}