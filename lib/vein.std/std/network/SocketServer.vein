#space "std"


public abstract class SocketServer {
    private server_handle: SocketHandle;
    private _endpoint: IpEndpoint;

    start(endpoint: IpEndpoint): void {
        this._endpoint = endpoint;
        this.server_handle = self.tcp_bind_handle(endpoint);
        self.tcp_listen_handle(this.server_handle, 128, &_internal_onConnection);
    }

    private _internal_onConnection(sr: raw, status: i32): void {
        if (status != 0) {
            return;
        }
        auto client = new SocketClient();
        this.onConnected(client);
    }

    abstract onConnected(client: SocketClient): void;
    abstract onRead(client: SocketClient, writer: StreamWriter, reader: StreamReader): void;

    [native("__internal__", "socket_tcp_bind_handle")]
    private static extern tcp_bind_handle(endpoint: IpEndpoint): SocketHandle;
    [native("__internal__", "tcp_listen_handle")]
    private static extern tcp_listen_handle(server: SocketHandle, nap: i32, fn: rawOnServerConnection): void;
    
}

struct SocketHandle {
    server_handle: raw;
}

alias rawOnServerConnection <| (sr: raw, status: i32): void;