---
- NOP: 
    description: Nope operation.
- ADD: 
    description: Add operation.
- SUB: 
    description: Substract operation.
- DIV: 
    description: Divide operation.
- MUL:
    description: Multiple operation.
- LDARG:
    description: Load into stack from argument.
    range: true
    S:
      description: Load into stack from argument by index.
      override-size: 4
- LD.THIS:
    description: Load into stack current instance of object.
- LDC:
    description: Load constant into stack.
    variations: [F4, F2, STR]
    override-size: 4
    I4:
      description: Load int32 constant into stack.
      range: true
      override-size: 4
    I2:
      description: Load int16 constant into stack.
      range: true
      override-size: 2
    I8:
      description: Load int64 constant into stack.
      range: true
      override-size: 8
    F8:
      description: Load float64 constant into stack.
      override-size: 8
    F16:
      description: Load float128 constant into stack.
      override-size: 20
- RESERVED.0:
    description: Reserved operation.
- RESERVED.1:
    description: Reserved operation.
- RESERVED.2:
    description: Reserved operation.
- RET:
    description: Return operation.
- CALL:
    description: Call operation.
    override-size: 9
- LDNULL:
    description: Load NULL into stack.
- LDF:
    description: Load value from field in instance into stack.
    override-size: 8
- LDSF:
    description: Load value from static field into stack.
    override-size: 8
- STF:
    description: Stage into instance field value from stack.
    override-size: 8
- STSF: 
    description: Stage into static field value from stack.
    override-size: 8
- LDLOC:
    description: Load from locals into stack.
    range: true
    S:
      override-size: 4
- STLOC:
    description: Load from stack into locals.
    range: true
    S:
      override-size: 4
- LOC.INIT:
    description: Initialization locals stack.
    override-size: 4
- LOC.INIT.X:
    description: (part of LOD.INIT) Initialization locals slot as derrived type.
    override-size: 4
- DUP:
    description: Duplicate memory from stack.
- XOR:
    description: XOR Operation.
- OR:
    description: OR Operation.
- AND:
    description: AND Operation.
- SHR:
    description: Shift Right Operation.
- SHL:
    description: Shift Left Operation.
- CONV:
    description: Convertation operation.
    variations: [R4, R8, I4]
- THROW:
    description: Throw exception operation.
- NEWOBJ:
    description: New object Operation.
    override-size: 4
- NEWARR:
    description: Allocate array onto evaluation stack by specified size and type.
- LDLEN:
    description: Load size of Array onto evaluation stack.
- LDELEM:
    description: Load element at a specified array index 
      onto top of evaluation stack as type specified in instruction.
    S:
      override-size: 4
- STELEM:
    description: Replaces array element at a given index with value on evaluation stack, 
      whose type is specified in the instruction.
    S:
      override-size: 4
- LD_TYPE:
    description: Load type token.
    override-size: 4
- EQL:
    description: Compare two value, when values are equal 1 (int32) stage into stack, otherwise 0 (int32).
    LQ:
      description: Compare two value, 
        when first value is less than or equal to second value stage 1 (int32) into stack, 
        otherwise 0 (int32). (a <= b)
    L:
      description: Compare two value, 
        when first value is less second value stage 1 (int32) into stack, 
        otherwise 0 (int32). (a < b)
    HQ:
      description: Compare two value, 
        when first value is greater than or equal to second value stage 1 (int32) into stack, 
        otherwise 0 (int32). (a >= b)
    H:
      description: Compare two value, 
        when first value is greater second value stage 1 (int32) into stack, 
        otherwise 0 (int32). (a > b)
    NQ:
      description: Compare two value, 
        when two integer/float is equal stage 1 (int32) into stack, 
        otherwise 0 (int32). (a == b)
    NN:
      description: Compare two value, 
        when two integer/float is not equal stage 1 (int32) into stack, 
        otherwise 0 (int32). (a != b)
    F:
      description: Compare two value, 
        when value has false, null or zero stage 1 (int32) into stack, 
        otherwise 0 (int32). (!a)
    T:
      description: Compare two value, 
        when value has true or either differs from null or from zero stage 1 (int32) into stack, 
        otherwise 0 (int32). (a)
- JMP:
    description: Control flow, jump onto label. (unconditional)
    use-root: true
    override-size: 4
    LQ:
      override-size: 4
      description: Control flow, jump onto label when first value is less than or equal to second value. (a <= b)
    L:
      override-size: 4
      description: Control flow, jump onto label when first value is less second value. (a < b)
    HQ:
      override-size: 4
      description: Control flow, jump onto label when first value is greater than or equal to second value. (a >= b)
    H:
      override-size: 4
      description: Control flow, jump onto label when first value is greater second value. (a > b)
    NQ:
      override-size: 4
      description: Control flow, jump onto label when two integer/float is equal. (a == b)
    NN:
      override-size: 4
      description: Control flow, jump onto label when two integer/float is not equal. (a != b)
    F:
      override-size: 4
      description: Control flow, jump onto label when value has false, null or zero. (!a)
    T:
      override-size: 4
      description: Control flow, jump onto label when value has true or either differs from null or from zero. (a)
