#use "stl.lib"
#typedef Complex = {Real: double, Imaginary: double};

/*
 asdasd
 asdasdasd
 asdasdsddd
*/
// asdasd
global auto new_line = "\n";

public enum Foo 
{
    A,
    B,
    C
}

public class Program
{
    operation Xuy[] -> void
    {
        body
        {
            use enum Foo;
            auto* the_a = master<Foo>()::A;
            auto* the_b = slave<Foo>(the_a)::B;

            auto b = static_cast<black_int32>(454);
        };
        gc auto;
    };
    operation Xuy[args: array<string>] -> void
    {
        body { };
        gc auto;
    };

    operation Main(args: array<string>) -> bool
    {
        body
        {
            auto v = new Complex(12.4, .2);
            Terminal.Println("Hello World");

            if (v is { Real > 10.0 })
                fail $"is not valid :(";

            return obj 
                |> pool
                |> prefabs
                |> destroy();
        }
        gc auto;
    };
    operation factorial<T>[i: int32] -> int32
    {
        body
        {
            return (1..i < 1 ? 1 : i).aggregate([f: int32, x: int32] => f * x);
        };
        gc nocontrol;
    };
    operation foo<T>[predicate: bool, sad: s] -> void where T is struct, IOperable
    {
        body 
        {
            auto** arr = stackalloc T[64];
            random_fill(arr);

            return arr.single(predicate);
        };
        gc
        {
            memory.free(&arr);
        }
    };
};
public extensions Vector3D
{
    operation Dot[this v1: Vector3D, v2: Vector3D] -> float
    {
        body
        {
            return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
        }
        gc nocontrol;
    }
};
/*
    public operation test[] -> void
    {
        body as IL
        {
            .nop
            .ldc.i4.0
            .ldargs.1
            .dup
            .conv.r4
            .call ${sys->test()}
            .ret
        }
    }
*/
public class Foo 
{
    public int32 w1;
    public union SAD
    {
        float x;
        float y;
        float z;
       
    }
};

public struct Vector<T> where T is struct, IOperable
{
    public { x, y, z } as T;
};

