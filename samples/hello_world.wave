#use "stl.lib"
#typedef Complex = {Real: double, Imaginary: double};
operation Xuy()
{

}
/*
 asdasd
 asdasdasd
 asdasdsddd
*/
// asdasd
global auto new_line = "\n";

public class Program
{
    public static main(int32 s) -> void
    {
        return s;
    }
    operation Xuy[] -> void
    {
        body
        {

        }
        gc auto;
    }
    operation Xuy[args: array<string>] -> void
    {
        body
        {
            
        }
        gc auto;
    }

    operation Main[args: array<string>] -> void
    {
        body
        {
            auto v = new Complex(12.4, .2);
            Terminal.Println("Hello World");

            if (v is { Real > 10.0 })
                fail $"bla bla {asd} xuy";

            auto govno = obj 
                |> get
                |> xuy
                |> govno;
        }
        gc auto;
    }
    operation factorial[i: int] -> int
    {
        body
        {
            return (1..i < 1 ? 1 : i).aggregate([f: int32, x: int32] => f * x);
        }
        gc nocontrol;
    }
    operation mul<T>[predicate: (~T) -> bool] -> T
    {
        body 
        {
            auto** arr = stackalloc T[64];
            random_fill(arr);

            return arr.single(predicate);
        }
        gc
        {
            memory.free(&arr);
        }
    }
} 
/*
    public operation test[] -> void
    {
        body as IL
        {
            .nop
            .ldc.i4.0
            .ldargs.1
            .dup
            .conv.r4
            .call ${sys->test()}
            .ret
        }
    }
*/
public class Foo 
{
    public int32 w1;
    public union SAD
    {
        float x;
        float y;
        float z;
    }
}

public struct Vector<~T> where T is struct, IOperable
{
    public T x;
    public T y;
    public T z;
}

public extensions Vector3D
{
    operation Dot[this v1: Vector3D, v2: Vector3D] -> float
    {
        body
        {
            
            return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
        }
        gc nocontrol;
    }
}